#!/bin/bash

# Script ho√†n ch·ªânh: T·ª´ th√™m SSH key ƒë·∫øn import v√†o GitHub
# S·ª≠ d·ª•ng: ./scripts/setup-all.sh

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

# Ki·ªÉm tra xem c√≥ ƒëang ·ªü trong git repository kh√¥ng
if [ ! -d ".git" ]; then
    print_error "Kh√¥ng t√¨m th·∫•y .git directory. H√£y ch·∫°y script n√†y t·ª´ root c·ªßa git repository."
    exit 1
fi

# Ki·ªÉm tra file secret.txt
SECRET_FILE="scripts/secret.txt"
if [ ! -f "$SECRET_FILE" ]; then
    print_error "Kh√¥ng t√¨m th·∫•y file $SECRET_FILE"
    exit 1
fi

print_step "üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh ho√†n ch·ªânh: SSH Key ‚Üí GitHub Secrets"

# Function ƒë·ªÉ t√¨m SSH keys trong ~/.ssh
find_ssh_keys() {
    local ssh_dir="$HOME/.ssh"
    local keys=()
    
    if [ ! -d "$ssh_dir" ]; then
        print_warning "Th∆∞ m·ª•c ~/.ssh kh√¥ng t·ªìn t·∫°i"
        return 1
    fi
    
    # T√¨m t·∫•t c·∫£ private keys (bao g·ªìm c·∫£ custom names)
    for key in "$ssh_dir"/*; do
        if [ -f "$key" ] && [[ "$key" != *".pub" ]] && [[ "$key" != *"known_hosts" ]] && [[ "$key" != *"config" ]]; then
            # Ki·ªÉm tra xem c√≥ ph·∫£i SSH key kh√¥ng
            if ssh-keygen -l -f "$key" &>/dev/null; then
                keys+=("$key")
            fi
        fi
    done
    
    echo "${keys[@]}"
}

# Function ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung SSH key
show_ssh_key() {
    local key_file="$1"
    echo ""
    print_info "N·ªôi dung file: $key_file"
    echo "----------------------------------------"
    cat "$key_file"
    echo "----------------------------------------"
    echo ""
}

# Function ƒë·ªÉ t·∫°o SSH key m·ªõi
create_ssh_key() {
    local key_name="$1"
    local ssh_dir="$HOME/.ssh"
    
    print_info "T·∫°o SSH key m·ªõi: $key_name"
    
    # T·∫°o th∆∞ m·ª•c .ssh n·∫øu ch∆∞a c√≥
    mkdir -p "$ssh_dir"
    chmod 700 "$ssh_dir"
    
    # T·∫°o key
    ssh-keygen -t rsa -b 4096 -f "$ssh_dir/$key_name" -N ""
    
    # Set permissions
    chmod 600 "$ssh_dir/$key_name"
    chmod 644 "$ssh_dir/$key_name.pub"
    
    print_success "ƒê√£ t·∫°o SSH key: $ssh_dir/$key_name"
}

# Function ƒë·ªÉ th√™m secret v√†o GitHub
add_secret() {
    local secret_name=$1
    local secret_value=$2
    
    if [ -z "$secret_value" ]; then
        print_warning "Secret $secret_name tr·ªëng, b·ªè qua..."
        return
    fi
    
    print_info "Th√™m secret: $secret_name"
    echo "$secret_value" | gh secret set "$secret_name" --repo "$FULL_REPO_NAME" --body -
    print_success "ƒê√£ th√™m secret: $secret_name"
}

# B∆∞·ªõc 1: T√¨m SSH keys hi·ªán c√≥
print_step "1. T√¨m SSH keys hi·ªán c√≥ trong ~/.ssh"

ssh_keys=($(find_ssh_keys))
if [ ${#ssh_keys[@]} -eq 0 ]; then
    print_warning "Kh√¥ng t√¨m th·∫•y SSH keys n√†o trong ~/.ssh"
    ssh_keys_found=false
else
    print_info "T√¨m th·∫•y ${#ssh_keys[@]} SSH key(s):"
    for i in "${!ssh_keys[@]}"; do
        echo "  $((i+1)). ${ssh_keys[$i]}"
    done
    ssh_keys_found=true
fi

# B∆∞·ªõc 2: Cho ph√©p user ch·ªçn SSH key
selected_key=""
if [ "$ssh_keys_found" = true ]; then
    echo ""
    print_info "B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng m·ªôt trong c√°c SSH keys tr√™n kh√¥ng?"
    for i in "${!ssh_keys[@]}"; do
        echo "  $((i+1)). ${ssh_keys[$i]}"
        read -p "    Hi·ªÉn th·ªã n·ªôi dung? (y/n): " show_content
        if [[ $show_content =~ ^[Yy]$ ]]; then
            show_ssh_key "${ssh_keys[$i]}"
        fi
    done
    
    echo ""
    read -p "Ch·ªçn SSH key ƒë·ªÉ s·ª≠ d·ª•ng (1-${#ssh_keys[@]}) ho·∫∑c Enter ƒë·ªÉ b·ªè qua: " choice
    
    if [[ $choice =~ ^[0-9]+$ ]] && [ $choice -ge 1 ] && [ $choice -le ${#ssh_keys[@]} ]; then
        selected_key="${ssh_keys[$((choice-1))]}"
        print_success "ƒê√£ ch·ªçn: $selected_key"
    else
        print_warning "B·ªè qua t·∫•t c·∫£ SSH keys hi·ªán c√≥"
    fi
fi

# B∆∞·ªõc 3: H·ªèi c√≥ mu·ªën t·∫°o SSH key m·ªõi kh√¥ng
if [ -z "$selected_key" ]; then
    echo ""
    read -p "B·∫°n c√≥ mu·ªën t·∫°o SSH key m·ªõi kh√¥ng? (y/n): " create_new
    
    if [[ $create_new =~ ^[Yy]$ ]]; then
        read -p "Nh·∫≠p t√™n file SSH key (m·∫∑c ƒë·ªãnh: id_rsa): " key_name
        key_name=${key_name:-id_rsa}
        
        create_ssh_key "$key_name"
        selected_key="$HOME/.ssh/$key_name"
        
        # Hi·ªÉn th·ªã n·ªôi dung key m·ªõi t·∫°o
        show_ssh_key "$selected_key"
        show_ssh_key "$selected_key.pub"
        
        print_info "Public key (ƒë·ªÉ th√™m v√†o server):"
        cat "$selected_key.pub"
        echo ""
        print_warning "H√£y th√™m public key v√†o ~/.ssh/authorized_keys tr√™n server!"
    fi
fi

# B∆∞·ªõc 4: C·∫≠p nh·∫≠t file secret.txt
if [ -n "$selected_key" ]; then
    print_step "2. C·∫≠p nh·∫≠t file secret.txt"
    
    # ƒê·ªçc n·ªôi dung SSH key
    ssh_key_content=$(cat "$selected_key")
    
    # C·∫≠p nh·∫≠t file secret.txt
    print_info "C·∫≠p nh·∫≠t SSH_PRIVATE_KEY trong $SECRET_FILE"
    
    # T·∫°o file t·∫°m th·ªùi
    temp_file=$(mktemp)
    
    # ƒê·ªçc file secret.txt v√† c·∫≠p nh·∫≠t SSH_PRIVATE_KEY
    while IFS= read -r line; do
        if [[ $line == SSH_PRIVATE_KEY=* ]]; then
            echo "SSH_PRIVATE_KEY=\"$ssh_key_content\"" >> "$temp_file"
        else
            echo "$line" >> "$temp_file"
        fi
    done < "$SECRET_FILE"
    
    # Thay th·∫ø file g·ªëc
    mv "$temp_file" "$SECRET_FILE"
    
    print_success "ƒê√£ c·∫≠p nh·∫≠t SSH_PRIVATE_KEY trong $SECRET_FILE"
else
    print_warning "Kh√¥ng c√≥ SSH key ƒë∆∞·ª£c ch·ªçn, gi·ªØ nguy√™n SSH_PRIVATE_KEY trong $SECRET_FILE"
fi

# B∆∞·ªõc 5: Import v√†o GitHub
print_step "3. Import secrets v√†o GitHub"

# Ki·ªÉm tra GitHub CLI
if ! command -v gh &> /dev/null; then
    print_error "GitHub CLI (gh) ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t tr∆∞·ªõc:"
    echo "  macOS: brew install gh"
    echo "  Ubuntu/Debian: sudo apt install gh"
    exit 1
fi

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p GitHub
if ! gh auth status &> /dev/null; then
    print_error "Ch∆∞a ƒëƒÉng nh·∫≠p GitHub CLI. Vui l√≤ng ch·∫°y: gh auth login"
    exit 1
fi

# L·∫•y repository name
REPO_OWNER=$(git config --get remote.origin.url | sed -n 's/.*github.com[:/]\([^/]*\)\/[^/]*.*/\1/p')
REPO_NAME=$(basename -s .git $(git config --get remote.origin.url))
FULL_REPO_NAME="$REPO_OWNER/$REPO_NAME"

print_info "Repository: $FULL_REPO_NAME"
print_info "B·∫Øt ƒë·∫ßu import secrets t·ª´ $SECRET_FILE..."

# ƒê·ªçc file secret.txt v√† import secrets
SSH_PRIVATE_KEY=""
SSH_HOST=""
SSH_USERNAME=""
CONTAINER_REGISTRY_PAT=""

while IFS= read -r line; do
    if [[ $line == SSH_PRIVATE_KEY=* ]]; then
        SSH_PRIVATE_KEY="${line#SSH_PRIVATE_KEY=}"
        # Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
        SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY%\"}"
        SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY#\"}"
    elif [[ $line == SSH_HOST=* ]]; then
        SSH_HOST="${line#SSH_HOST=}"
    elif [[ $line == SSH_USERNAME=* ]]; then
        SSH_USERNAME="${line#SSH_USERNAME=}"
    elif [[ $line == CONTAINER_REGISTRY_PAT=* ]]; then
        CONTAINER_REGISTRY_PAT="${line#CONTAINER_REGISTRY_PAT=}"
    fi
done < "$SECRET_FILE"

# Th√™m SSH_PRIVATE_KEY
if [ -n "$SSH_PRIVATE_KEY" ]; then
    add_secret "SSH_PRIVATE_KEY" "$SSH_PRIVATE_KEY"
fi

# Th√™m SSH_HOST
if [ -n "$SSH_HOST" ]; then
    add_secret "SSH_HOST" "$SSH_HOST"
fi

# Th√™m SSH_USERNAME
if [ -n "$SSH_USERNAME" ]; then
    add_secret "SSH_USERNAME" "$SSH_USERNAME"
fi

# Th√™m CONTAINER_REGISTRY_PAT
if [ -n "$CONTAINER_REGISTRY_PAT" ]; then
    add_secret "CONTAINER_REGISTRY_PAT" "$CONTAINER_REGISTRY_PAT"
fi

# B∆∞·ªõc 6: Hi·ªÉn th·ªã k·∫øt qu·∫£
print_step "4. Ki·ªÉm tra k·∫øt qu·∫£"

print_success "Ho√†n t·∫•t! T·∫•t c·∫£ secrets ƒë√£ ƒë∆∞·ª£c import v√†o GitHub."
print_info "B·∫°n c√≥ th·ªÉ ki·ªÉm tra t·∫°i: https://github.com/$FULL_REPO_NAME/settings/secrets/actions"

# Hi·ªÉn th·ªã public key n·∫øu c√≥
if [ -n "$selected_key" ]; then
    public_key_file="$selected_key.pub"
    if [ -f "$public_key_file" ]; then
        echo ""
        print_info "üìã SSH Public Key (ƒë·ªÉ th√™m v√†o server):"
        echo "----------------------------------------"
        cat "$public_key_file"
        echo "----------------------------------------"
        echo ""
        print_warning "‚ö†Ô∏è  H√£y th√™m public key v√†o ~/.ssh/authorized_keys tr√™n server!"
    fi
fi

echo ""
print_info "üéØ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:"
echo "  - Ch·∫°y ./scripts/git-tag.sh ƒë·ªÉ deploy"
echo "  - Ch·∫°y ./scripts/check-secrets.sh ƒë·ªÉ ki·ªÉm tra secrets"
echo ""
print_info "üìù L∆∞u √Ω:"
echo "  - Secrets s·∫Ω ƒë∆∞·ª£c m√£ h√≥a v√† ch·ªâ hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng ***"
echo "  - Ch·ªâ c√≥ quy·ªÅn admin m·ªõi c√≥ th·ªÉ xem/s·ª≠a secrets"
echo "  - Secrets s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng trong workflow CI/CD" 